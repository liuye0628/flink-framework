package com.atguigu.datastructalg.chapter01.class01;

/**
 * 实现打印一个整数的二进制
 */

public class $01_PrintBinary {

    public static void main(String[] args) {
        /**
         * 位运算:原码,反码,补码
         *  a.计算机运算都是以补码的方式来运算的
         *  b.二进制的最高位是符号位:0表示正数,1表示负数
         *  c.正数的原码,反码,补码都一样(三码合一)
         *  d.负数的反码=它的原码符号位不变,其他位取反
         *  e.负数的补码=它的反码+1
         *  f.0的反码,补码都是0
         *  g.当看运算结果的时候,要看它的原码
         */
        int num = 4;
        print(num); //00000000000000000000000000000100
        print(-num);//11111111111111111111111111111100
        System.out.println("----------------------");
        int max = Integer.MAX_VALUE;
        System.out.println(max);//2147483647
        int min =  Integer.MIN_VALUE;
        System.out.println(min);//-2147483648
        System.out.println("----------------------");
        /**
         * 打印-1的二进制(计算机位运算都是以补码的方式来运算的):
         *  a.-1的原码:10000000000000000000000000000001
         *  b.-1的反码:11111111111111111111111111111110
         *  c.-1的补码:11111111111111111111111111111111
         */
        print(-1);//打印-1的二进制:11111111111111111111111111111111
        /**
         * java中有7个位运算符:
         *  1.&:按位与
         *  2.|:按位或
         *  3.^:按位异或
         *  4.~:按位取反
         *  5.>>:算术右移(低位溢出,符号位不变,并用符号位补溢出的高位)
         *  6.<<:算术左移:(符号位不变,低位补0)
         *  7.>>>:无符号右移:(低位溢出,高位补0)
         */
        int a = 12319283;
        int b = 3819283;
        print(a);    //00000000101110111111101000110011
        print(b);    //00000000001110100100011100010011
        print(a & b);//00000000001110100100001000010011
        print(a | b);//00000000101110111111111100110011
        print(a ^ b);//00000000100000011011110100100000
        System.out.println("----------------------");
        int c = 123823128;
        int d = ~c;
        print(c);//00000111011000010110010000011000
        print(d);//11111000100111101001101111100111
        System.out.println("----------------------");
        System.out.println(1<<31);//-2147483648
        int e = 1123123;
        int f = -e;
        print(e);    //00000000000100010010001100110011
        print(e>>1); //00000000000010001001000110011001
        print(e<<1); //00000000001000100100011001100110
        print(e>>>1);//00000000000010001001000110011001
        print(f);    //11111111111011101101110011001101

    }

    /**
     * 打印一个整数的二进制
     * @param num
     */
    public static void print(int num){
        for (int i = 31; i >= 0; i--) {
            System.out.print((num & (1 << i)) == 0 ? "0" : "1");
        }
        System.out.println();

    }
}
