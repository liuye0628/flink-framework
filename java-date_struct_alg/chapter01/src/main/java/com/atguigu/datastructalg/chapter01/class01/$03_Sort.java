package com.atguigu.datastructalg.chapter01.class01;

public class $03_Sort {
    public static void main(String[] args) {
        /**
         * 选择排序:遍历所有的数据,先在数据中找到最大或最小的元素,放到序列的起始,然后从余下的数据中继续寻找最大或最小的元素,依次放到序列中直到所有数据有序
         *    int[] arr = 8,34,23,5,0
         *
         *    5,34,23,8,0
         *    0,34,23,8,5
         */

        /**
         * 冒泡排序:每次相邻元素进行两两比较,如果顺序和预先规定的顺序不一致,则进行位置交换
         *   int[] arr = 8,34,23,5,0
         *
         */

        /**
         * 插入排序:将前i个（初始为1）数据假定为有序序列，依次遍历数据，将当前数据插入到前述有序序列的适当位置，形成前i+1个有序序列，依次遍历完所有数据，直至序列中所有数据有序。数据是反序时，耗费时间最长O(n²)；数据是正序时，耗费时间最短O(n)。适用于部分数据已经排好的少量数据排序。
         *
         * 平均时间复杂度为O(n²)，空间复杂度为O(1)，是一种稳定的排序算法。
         */

    }


}
